# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/nrf5_sdk.gni")
import("//build_overrides/openthread.gni")

openthread_nrf5xx_root = "${chip_root}/third_party/openthread/ot-nrf528xx"

import("${nrf5_sdk_build_root}/nrf5_sdk.gni")

# TODO(spang): Clean this up. We're mixing the vanilla Nordic SDK with forked
# SDK code from OpenThread. See use_openthread_radio_driver below.

nrf528xx_sdk_common = [
  "${openthread_nrf5xx_root}/src/src/misc.c",
  "${openthread_nrf5xx_root}/src/src/radio.c",
  "${openthread_nrf5xx_root}/src/src/alarm.c",
  "${openthread_nrf5xx_root}/src/src/diag.c",
  "${openthread_nrf5xx_root}/src/src/entropy.c",
  "${openthread_nrf5xx_root}/src/src/fem.c",
  "${openthread_nrf5xx_root}/src/src/flash.c",
  "${openthread_nrf5xx_root}/src/src/logging.c",
  "${openthread_nrf5xx_root}/src/src/system.c",
  "${openthread_nrf5xx_root}/src/src/temp.c",
  "${openthread_nrf5xx_root}/src/src/platform-fem.h",
  "${openthread_nrf5xx_root}/src/src/platform-nrf5.h",
]

copy("copy_nrf52840_headers") {
  sources = [
    "${openthread_nrf5xx_root}/src/src/platform-softdevice.h",
  ]

  outputs =
      [ "${root_gen_dir}/include/openthread/platform/{{source_file_part}}" ]
}

static_library("libopenthread-nrf52840-softdevice-sdk") {
  sources = nrf528xx_sdk_common
  sources += [
    "${openthread_nrf5xx_root}/src/src/flash_sd.c",
    "${openthread_nrf5xx_root}/src/src/platform-softdevice.h",
    "${openthread_nrf5xx_root}/src/src/softdevice.c",
    "${openthread_nrf5xx_root}/src/src/softdevice.h",
  ]
  public_deps = [
    ":copy_nrf52840_headers",
    ":libnordicsemi_nrf52840_radio_driver_softdevice",
    ":libopenthread-nrf52840-transport",
    "${nrf5_sdk_build_root}:nrf5_sdk",
    "..:libopenthread-platform",
    "..:libopenthread-platform-utils",
  ]
  cflags = [ "-Wno-unused-but-set-variable" ]
}

config("libopenthread-nrf52840-transport_config") {
  defines = [ "UART_AS_SERIAL_TRANSPORT=1" ]
}

static_library("libopenthread-nrf52840-transport") {
  sources = [
    "${openthread_nrf5xx_root}/src/src/platform-nrf5-transport.h",
    "${openthread_nrf5xx_root}/src/src/transport/spi-slave.c",
    "${openthread_nrf5xx_root}/src/src/transport/transport-drivers.h",
    "${openthread_nrf5xx_root}/src/src/transport/transport.c",
    "${openthread_nrf5xx_root}/src/src/transport/uart.c",
#    "${openthread_nrf5xx_root}/src/src/transport/usb-cdc-uart.c",
  ]

  public_configs = [ ":libopenthread-nrf52840-transport_config" ]

  public_deps = [
    ":libnordicsemi_nrf52840",
    "${nrf5_sdk_build_root}:nrf5_sdk",
    "${openthread_root}/src/core:libopenthread_core_headers",
    "..:libopenthread-platform",
    "..:libopenthread-platform-utils",
  ]
}

declare_args() {
  # Use the OpenThread copy of the 802.15.4 radio driver.
  use_openthread_radio_driver = true
}

if (use_openthread_radio_driver) {
  nrf528xx_radio_driver_src =
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/sdk-nrfxlib/nrf_802154"
} else {
  nrf528xx_radio_driver_src =
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/sdk-nrfxlib/nrf_802154"
      #"${nrf5_sdk_root}/external/nRF-IEEE-802.15.4-radio-driver/src"
}

nrf528xx_radio_driver_common_sources = [
#  "${nrf5_sdk_root}/examples/multiprotocol/app_utils/multiprotocol_802154_config.c",
#  "${nrf5_sdk_root}/examples/multiprotocol/app_utils/multiprotocol_802154_config.h",

  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_notification_swi.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_priority_drop_swi.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_rx_buffer.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_queue.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_notification_direct.c",
#  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_debug_gpio.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_rssi.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_encrypt.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_peripherals_alloc.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_trx_dppi.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_swi.c",
  "${nrf528xx_radio_driver_src}/driver/src/fal/nrf_802154_fal.c",
  "${nrf528xx_radio_driver_src}/driver/src/platform/random/nrf_802154_random_stdlib.c",
  "${nrf528xx_radio_driver_src}/driver/src/platform/random/nrf_802154_random_newlib.c",
  "${nrf528xx_radio_driver_src}/driver/src/platform/temperature/nrf_802154_temperature_none.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_request_swi.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_debug_assert.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_trx.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_core.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_stats.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_pib.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_critical_section.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/ack_generator/nrf_802154_enh_ack_generator.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/ack_generator/nrf_802154_ack_data.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/ack_generator/nrf_802154_imm_ack_generator.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/ack_generator/nrf_802154_ack_generator.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_filter.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_delayed_trx.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_ack_timeout.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_security_writer.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_ifs.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_security_pib_ram.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_precise_ack_timeout.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_csma_ca.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_ie_writer.c",
  "${nrf528xx_radio_driver_src}/driver/src/mac_features/nrf_802154_frame_parser.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_core_hooks.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_request_direct.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_aes_ccm.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_debug.c",
  "${nrf528xx_radio_driver_src}/driver/src/nrf_802154_trx_ppi.c",
  "${nrf528xx_radio_driver_src}/sl/platform/irq/nrf_802154_irq_baremetal.c",
  "${nrf528xx_radio_driver_src}/sl/platform/gpiote/nrf_802154_gpiote_none.c",
  "${nrf528xx_radio_driver_src}/sl/platform/gpiote/nrf_802154_gpiote_crit_sect.c",
  "${nrf528xx_radio_driver_src}/sl/platform/lp_timer/nrf_802154_lp_timer.c",
  "${nrf528xx_radio_driver_src}/sl/platform/lp_timer/nrf_802154_lp_timer_none.c",
  "${nrf528xx_radio_driver_src}/sl/platform/clock/nrf_802154_clock_mpsl.c",
  "${nrf528xx_radio_driver_src}/sl/platform/clock/nrf_802154_clock.c",
  "${nrf528xx_radio_driver_src}/sl/platform/hp_timer/nrf_802154_hp_timer.c",
]

nrf528xx_radio_driver_softdevice_sources = [
#    "${openthread_nrf5xx_root}/src/src/transport/usb-cdc-uart.c",
]

config("libnordicsemi_nrf52840_config") {
  defines = [ "NRF_802154_PROJECT_CONFIG=\"platform-config.h\"" ]

  include_dirs = [
    "${openthread_nrf5xx_root}/src/src",
    "${openthread_nrf5xx_root}/src/nrf52840",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/cmsis",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/config/nrf52840/config",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/dependencies",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/drivers/clock",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx/drivers/include",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx/hal",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx/mdk",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/delay",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/util",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/log",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/log/src",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/experimental_section_vars",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/strerror",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/fds",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/util",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/softdevice/common",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/softdevice/s140/headers",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/softdevice/s140/headers/nrf52",
  ]
}

source_set("openthread_core_config_nrf52840") {
  sources = [
    "${openthread_nrf5xx_root}/src/nrf52840/openthread-core-nrf52840-config-check.h",
    "${openthread_nrf5xx_root}/src/nrf52840/openthread-core-nrf52840-config.h",
  ]

  public_configs = [ ":libnordicsemi_nrf52840_config" ]
}

source_set("libnordicsemi_nrf52840") {
  sources = [
    "${openthread_nrf5xx_root}/src/nrf52840/platform-config.h",
    "${openthread_nrf5xx_root}/src/nrf52840/transport-config.h",
  ]

  public_configs = [ ":libnordicsemi_nrf52840_config" ]
}

config("nrf528xx_radio_driver_config") {
  include_dirs = [
    "${nrf528xx_radio_driver_src}/sl/include",
    "${nrf528xx_radio_driver_src}/sl/include/platform",
    "${nrf528xx_radio_driver_src}/driver/include",
    "${nrf528xx_radio_driver_src}/driver/include/platform",
    "${nrf528xx_radio_driver_src}/driver/src",
    "${nrf528xx_radio_driver_src}/../mpsl/include",
    "${nrf5_sdk_root}/examples/multiprotocol/app_utils",
  ]
}

config("libnordicsemi_softdevice_config") {
  defines = [ "RAAL_SOFTDEVICE=1" ]
}

static_library("libnordicsemi_nrf52840_radio_driver_softdevice") {
  sources = nrf528xx_radio_driver_common_sources +
            nrf528xx_radio_driver_softdevice_sources

  public_configs = [
    ":nrf528xx_radio_driver_config",
    ":libnordicsemi_softdevice_config",
  ]

  public_deps = [
    ":libnordicsemi_nrf52840",
    "${nrf5_sdk_build_root}:nrf5_sdk",
    "${openthread_root}/src/core:libopenthread_core_headers",
  ]
}
