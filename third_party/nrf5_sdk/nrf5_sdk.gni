# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/jlink.gni")
import("//build_overrides/nrf5_sdk.gni")
import("//build_overrides/openthread.gni")

declare_args() {
  # Location of the nRF5 SDK.
  nrf5_sdk_root = getenv("NRF5_SDK_ROOT")
  nrf5_sdk_version = "7.0.1"
}

assert(nrf5_sdk_root != "", "nrf5_sdk_root must be specified")

# Defines an nRF SDK build target.
#
# Parameters:
#   nrf5_sdk_root - The location of the nRF SDK.
#   sources - Extra source files to build.
template("nrf5_sdk") {
  if (defined(invoker.nrf5_sdk_root)) {
    nrf5_sdk_root = invoker.nrf5_sdk_root
  }

  assert(nrf5_sdk_root != "", "nrf5_sdk_root must be specified")

  sdk_target_name = target_name

openthread_nrf5xx_root = "${chip_root}/third_party/openthread/ot-nrf528xx"
  nrf528xx_radio_driver_src =
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/sdk-nrfxlib/nrf_802154"

  config("${sdk_target_name}_config") {
    include_dirs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    # We want to treat SDK headers as system headers, so that warnings in those
    # headers are not fatal.  Therefore don't add them directly to include_dirs;
    # we will add them to cflags below instead.
    _sdk_include_dirs = [
      "${nrf5_sdk_root}/components/boards",
      "${nrf5_sdk_root}/external/freertos/config",
      "${nrf5_sdk_root}/external/freertos/portable/CMSIS/nrf52",
      "${nrf5_sdk_root}/external/freertos/portable/GCC/nrf52",
      "${nrf5_sdk_root}/external/freertos/source/include",

    "${openthread_nrf5xx_root}/src/src",
    "${openthread_nrf5xx_root}/src/nrf52840",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/cmsis",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/config/nrf52840/config",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/dependencies",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/drivers/clock",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx/drivers/include",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx/hal",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx/mdk",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/delay",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/util",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/log",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/log/src",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/experimental_section_vars",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/strerror",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/fds",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/atomic",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/atomic_fifo",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/fstorage",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/util",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/mem_manager",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/softdevice/common",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/softdevice/s140/headers",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/softdevice/s140/headers/nrf52",

    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/libraries/nrf_security/include",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/libraries/nrf_security/config",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/libraries/nrf_security/mbedtls_plat_config",
    "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/libraries/nrf_security/nrf_cc310_plat/include",
    "${nrf528xx_radio_driver_src}/sl/include",
    "${nrf528xx_radio_driver_src}/sl/include/platform",
    "${nrf528xx_radio_driver_src}/driver/include",
    "${nrf528xx_radio_driver_src}/driver/include/platform",
    "${nrf528xx_radio_driver_src}/driver/src",
    "${nrf528xx_radio_driver_src}/../mpsl/include",
    "${nrf5_sdk_root}/examples/multiprotocol/app_utils",
    ]

    lib_dirs = [ "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/nrfx/mdk" ]

    libs = [
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedcrypto_glue.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedcrypto_glue.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedcrypto_glue_cc310.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedcrypto_glue_vanilla.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedcrypto_cc310_backend.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedcrypto_vanilla_backend.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedtls_base_vanilla.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedtls_tls_vanilla.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libmbedtls_x509_vanilla.a",
      "${nrf5_sdk_root}/external/nrf_security/lib/libnrf_cc310_platform_0.9.2.a",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/sdk-nrfxlib/nrf_802154/sl/sl/lib/nRF52840/hard-float/libnrf-802154-sl.a",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/sdk-nrfxlib/mpsl/lib/cortex-m4/hard-float/libmpsl.a"
    ]

    defines = [
      "NRF52840_XXAA",
      "BOARD_PCA10056",
      "BSP_DEFINES_ONLY",
      "CONFIG_GPIO_AS_PINRESET",
      "FLOAT_ABI_HARD",
      "__HEAP_SIZE=40960",
      "__STACK_SIZE=8192",
      "PRINTF_DISABLE_SUPPORT_EXPONENTIAL",
      "S140",
      "ENABLE_FEM",
      "FREERTOS",
      "MBEDTLS_CONFIG_FILE=\"nrf-config.h\"",
      "MBEDTLS_USER_CONFIG_FILE=\"nrf52840-mbedtls-config.h\"",
      "MULTIPROTOCOL_802154_CONFIG_PRESENT",
      "NRFX_PRS_ENABLED=0",
      "NRF_SD_BLE_API_VERSION=7",
      "SOFTDEVICE_PRESENT=1",
    ]
    if (defined(invoker.defines)) {
      defines += invoker.defines
    }

    cflags = [
      "-Wno-array-bounds",
      "-Wno-unused-function",
      "-Wno-expansion-to-defined",
      "-Wno-implicit-fallthrough"
    ]

    # Now add our "system-header" include dirs
    foreach(include_dir, _sdk_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }
  }

  # TODO - Break up this monolith and make it configurable.
  source_set(sdk_target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }

    sources += [
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/fstorage/nrf_fstorage.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/fstorage/nrf_fstorage_sd.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/atomic_fifo/nrf_atfifo.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/atomic/nrf_atomic.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/fds/fds.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/softdevice/common/nrf_sdh.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/experimental_section_vars/nrf_section_iter.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/util/app_util_platform.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/util/app_error.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/util/app_error_handler_gcc.c",
      "${openthread_nrf5xx_root}/third_party/NordicSemiconductor/components/libraries/util/app_error_weak.c",
      "${openthread_nrf5xx_root}/nrf_802154_sl_platform/tick.c",
      "${nrf5_sdk_root}/external/freertos/portable/CMSIS/nrf52/port_cmsis.c",
      "${nrf5_sdk_root}/external/freertos/portable/CMSIS/nrf52/port_cmsis_systick.c",
      "${nrf5_sdk_root}/external/freertos/portable/CMSIS/nrf52/portmacro_cmsis.h",
      "${nrf5_sdk_root}/external/freertos/portable/GCC/nrf52/port.c",
      "${nrf5_sdk_root}/external/freertos/portable/GCC/nrf52/portmacro.h",
      "${nrf5_sdk_root}/external/freertos/source/croutine.c",
      "${nrf5_sdk_root}/external/freertos/source/event_groups.c",
      "${nrf5_sdk_root}/external/freertos/source/include/FreeRTOS.h",
      "${nrf5_sdk_root}/external/freertos/source/include/croutine.h",
      "${nrf5_sdk_root}/external/freertos/source/include/deprecated_definitions.h",
      "${nrf5_sdk_root}/external/freertos/source/include/event_groups.h",
      "${nrf5_sdk_root}/external/freertos/source/include/list.h",
      "${nrf5_sdk_root}/external/freertos/source/include/mpu_wrappers.h",
      "${nrf5_sdk_root}/external/freertos/source/include/portable.h",
      "${nrf5_sdk_root}/external/freertos/source/include/projdefs.h",
      "${nrf5_sdk_root}/external/freertos/source/include/queue.h",
      "${nrf5_sdk_root}/external/freertos/source/include/semphr.h",
      "${nrf5_sdk_root}/external/freertos/source/include/stack_macros.h",
      "${nrf5_sdk_root}/external/freertos/source/include/stream_buffer.h",
      "${nrf5_sdk_root}/external/freertos/source/include/task.h",
      "${nrf5_sdk_root}/external/freertos/source/include/timers.h",
      "${nrf5_sdk_root}/external/freertos/source/list.c",
      "${nrf5_sdk_root}/external/freertos/source/portable/MemMang/heap_3.c",
      "${nrf5_sdk_root}/external/freertos/source/queue.c",
      "${nrf5_sdk_root}/external/freertos/source/stream_buffer.c",
      "${nrf5_sdk_root}/external/freertos/source/tasks.c",
      "${nrf5_sdk_root}/external/freertos/source/timers.c",

    ]

    public_deps = [
      "${openthread_root}/include/openthread:openthread_config",
      "${segger_rtt_root}:segger_rtt",
      "${segger_rtt_root}:segger_rtt_printf",
      "${segger_rtt_root}:segger_rtt_syscalls",
    ]

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${sdk_target_name}_config" ]
  }
}
