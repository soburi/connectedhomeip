# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/nrf5_sdk.gni")
import("//build_overrides/openthread.gni")
import("//build/chip/buildconfig_header.gni")
import("${chip_root}/third_party/openthread/repo/etc/gn/openthread.gni")

openthread_nrf528xx_root = "${chip_root}/third_party/openthread/ot-nrf528xx"

import("${nrf5_sdk_build_root}/nrf5_sdk.gni")

# TODO(spang): Clean this up. We're mixing the vanilla Nordic SDK with forked
# SDK code from OpenThread. See use_openthread_radio_driver below.

nrf528xx_sdk_common = [
  "${openthread_nrf528xx_root}/src/src/misc.c",
  "${openthread_nrf528xx_root}/src/src/radio.c",
  "${openthread_nrf528xx_root}/src/src/alarm.c",
  "${openthread_nrf528xx_root}/src/src/diag.c",
  "${openthread_nrf528xx_root}/src/src/entropy.c",
  "${openthread_nrf528xx_root}/src/src/fem.c",
  "${openthread_nrf528xx_root}/src/src/flash.c",
  "${openthread_nrf528xx_root}/src/src/logging.c",
  "${openthread_nrf528xx_root}/src/src/system.c",
  "${openthread_nrf528xx_root}/src/src/temp.c",
  "${openthread_nrf528xx_root}/src/src/platform-fem.h",
  "${openthread_nrf528xx_root}/src/src/platform-nrf5.h",
]

copy("copy_nrf52840_headers") {
  sources = [
    "${openthread_nrf528xx_root}/src/src/platform-softdevice.h",
  ]

  outputs =
      [ "${root_gen_dir}/include/openthread/platform/{{source_file_part}}" ]
}

static_library("libopenthread-nrf52840-softdevice-sdk") {
  sources = nrf528xx_sdk_common
  sources += [
    "${openthread_nrf528xx_root}/src/src/flash_sd.c",
    "${openthread_nrf528xx_root}/src/src/platform-softdevice.h",
    "${openthread_nrf528xx_root}/src/src/softdevice.c",
    "${openthread_nrf528xx_root}/src/src/softdevice.h",
  ]
  public_deps = [
    ":copy_nrf52840_headers",
    ":libnordicsemi_nrf52840_radio_driver_softdevice",
    ":libopenthread-nrf52840-transport",
    "${nrf5_sdk_build_root}:nrf5_sdk",
    "..:libopenthread-platform",
    "..:libopenthread-platform-utils",
  ]
  public_deps += [ ":openthread_core_buildconfig" ]
  cflags = [ "-Wno-unused-but-set-variable" ]
}

config("libopenthread-nrf52840-transport_config") {
  defines = [ "UART_AS_SERIAL_TRANSPORT=1" ]
}

static_library("libopenthread-nrf52840-transport") {
  sources = [
    "${openthread_nrf528xx_root}/src/src/platform-nrf5-transport.h",
    "${openthread_nrf528xx_root}/src/src/transport/spi-slave.c",
    "${openthread_nrf528xx_root}/src/src/transport/transport-drivers.h",
    "${openthread_nrf528xx_root}/src/src/transport/transport.c",
    "${openthread_nrf528xx_root}/src/src/transport/uart.c",
    "${openthread_nrf528xx_root}/src/src/transport/usb-cdc-uart.c",
  ]

  public_configs = [ ":libopenthread-nrf52840-transport_config" ]

  public_deps = [
    ":libnordicsemi_nrf52840",
    "${nrf5_sdk_build_root}:nrf5_sdk",
    "${openthread_root}/src/core:libopenthread_core_headers",
    "..:libopenthread-platform",
    "..:libopenthread-platform-utils",
  ]
}

declare_args() {
  # Use the OpenThread copy of the 802.15.4 radio driver.
  use_openthread_radio_driver = true
}

if (use_openthread_radio_driver) {
  nrf528xx_radio_driver_src =
      "${openthread_nrf528xx_root}/third_party/NordicSemiconductor/drivers/radio"
} else {
  nrf528xx_radio_driver_src =
      "${nrf5_sdk_root}/external/nRF-IEEE-802.15.4-radio-driver/src"
}

nrf528xx_radio_driver_common_sources = [
  "${nrf528xx_radio_driver_src}/fal/nrf_802154_fal.c",
  "${nrf528xx_radio_driver_src}/fem/three_pin_gpio/nrf_fem_three_pin_gpio.c",
  "${nrf528xx_radio_driver_src}/mac_features/ack_generator/nrf_802154_ack_data.c",
  "${nrf528xx_radio_driver_src}/mac_features/ack_generator/nrf_802154_ack_generator.c",
  "${nrf528xx_radio_driver_src}/mac_features/ack_generator/nrf_802154_enh_ack_generator.c",
  "${nrf528xx_radio_driver_src}/mac_features/ack_generator/nrf_802154_imm_ack_generator.c",
  "${nrf528xx_radio_driver_src}/mac_features/nrf_802154_csma_ca.c",
  "${nrf528xx_radio_driver_src}/mac_features/nrf_802154_delayed_trx.c",
  "${nrf528xx_radio_driver_src}/mac_features/nrf_802154_filter.c",
  "${nrf528xx_radio_driver_src}/mac_features/nrf_802154_frame_parser.c",
  "${nrf528xx_radio_driver_src}/mac_features/nrf_802154_precise_ack_timeout.c",
  "${nrf528xx_radio_driver_src}/nrf_802154.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_core.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_core_hooks.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_critical_section.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_debug.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_pib.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_rssi.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_rx_buffer.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_timer_coord.c",
  "${nrf528xx_radio_driver_src}/platform/clock/nrf_802154_clock_sdk.c",
  "${nrf528xx_radio_driver_src}/platform/coex/nrf_802154_wifi_coex_none.c",
  "${nrf528xx_radio_driver_src}/platform/hp_timer/nrf_802154_hp_timer.c",
  "${nrf528xx_radio_driver_src}/rsch/nrf_802154_rsch.c",
  "${nrf528xx_radio_driver_src}/rsch/nrf_802154_rsch_crit_sect.c",
  "${nrf528xx_radio_driver_src}/timer_scheduler/nrf_802154_timer_sched.c",
  "${nrf5_sdk_root}/examples/multiprotocol/app_utils/multiprotocol_802154_config.c",
  "${nrf5_sdk_root}/examples/multiprotocol/app_utils/multiprotocol_802154_config.h",
]

nrf528xx_radio_driver_softdevice_sources = [
  "${nrf528xx_radio_driver_src}/nrf_802154_notification_swi.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_priority_drop_swi.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_request_swi.c",
  "${nrf528xx_radio_driver_src}/nrf_802154_swi.c",
  "${nrf528xx_radio_driver_src}/rsch/raal/softdevice/nrf_raal_softdevice.c",
]

config("libnordicsemi_nrf52840_config") {
  defines = [ "NRF_802154_PROJECT_CONFIG=\"platform-config.h\"" ]

  include_dirs = [
    "${openthread_nrf528xx_root}/src/src",
    "${openthread_nrf528xx_root}/src/nrf52840",
  ]
}

source_set("openthread_core_config_nrf52840") {
  sources = [
    "${openthread_nrf528xx_root}/src/nrf52840/openthread-core-nrf52840-config-check.h",
    "${openthread_nrf528xx_root}/src/nrf52840/openthread-core-nrf52840-config.h",
  ]

  public_configs = [ ":libnordicsemi_nrf52840_config" ]
}

source_set("libnordicsemi_nrf52840") {
  sources = [
    "${openthread_nrf528xx_root}/src/nrf52840/platform-config.h",
    "${openthread_nrf528xx_root}/src/nrf52840/transport-config.h",
  ]

  public_configs = [ ":libnordicsemi_nrf52840_config" ]
}

config("nrf528xx_radio_driver_config") {
  include_dirs = [
    "${nrf528xx_radio_driver_src}",
    "${nrf528xx_radio_driver_src}/fem",
    "${nrf528xx_radio_driver_src}/fem/three_pin_gpio",
    "${nrf528xx_radio_driver_src}/rsch/raal",
    "${nrf528xx_radio_driver_src}/rsch/raal/softdevice",
    "${nrf528xx_radio_driver_src}/platform/temperature",
    "${nrf528xx_radio_driver_src}/platform/lp_timer",
    "${nrf5_sdk_root}/examples/multiprotocol/app_utils",
  ]
}

config("libnordicsemi_softdevice_config") {
  defines = [ "RAAL_SOFTDEVICE=1" ]
}

static_library("libnordicsemi_nrf52840_radio_driver_softdevice") {
  sources = nrf528xx_radio_driver_common_sources +
            nrf528xx_radio_driver_softdevice_sources

  public_configs = [
    ":nrf528xx_radio_driver_config",
    ":libnordicsemi_softdevice_config",
  ]

  public_deps = [
    ":libnordicsemi_nrf52840",
    "${nrf5_sdk_build_root}:nrf5_sdk",
    "${openthread_root}/src/core:libopenthread_core_headers",
  ]
}

  buildconfig_header("openthread_core_buildconfig") {
    defines = []
    header = "openthread-project-core-config.h"
    #if (openthread_config_file != "") {
    #  header = openthread_config_file
    #}
    header_dir = "./"

    if (openthread_config_thread_version == "1.1") {
      defines += [ "OPENTHREAD_CONFIG_THREAD_VERSION=OT_THREAD_VERSION_1_1" ]
    } else if (openthread_config_thread_version == "1.2") {
      defines += [ "OPENTHREAD_CONFIG_THREAD_VERSION=OT_THREAD_VERSION_1_2" ]
    } else if (openthread_config_thread_version != "") {
      assert(false,
             "Unrecognized Thread version: ${openthread_config_thread_version}")
    }

    if (openthread_config_log_output == "none") {
      defines +=
          [ "OPENTHREAD_CONFIG_LOG_OUTPUT=OPENTHREAD_CONFIG_LOG_OUTPUT_NONE" ]
    } else if (openthread_config_log_output == "debug_uart") {
      defines += [
        "OPENTHREAD_CONFIG_LOG_OUTPUT=OPENTHREAD_CONFIG_LOG_OUTPUT_DEBUG_UART",
      ]
    } else if (openthread_config_log_output == "app") {
      defines +=
          [ "OPENTHREAD_CONFIG_LOG_OUTPUT=OPENTHREAD_CONFIG_LOG_OUTPUT_APP" ]
    } else if (openthread_config_log_output == "platform_defined") {
      defines += [ "OPENTHREAD_CONFIG_LOG_OUTPUT=OPENTHREAD_CONFIG_LOG_OUTPUT_PLATFORM_DEFINED" ]
    } else if (openthread_config_log_output != "") {
      assert(false, "Unrecognized log output: ${openthread_config_log_output}")
    }

    if (!openthread_config_assert_enable) {
      defines += [ "OPENTHREAD_CONFIG_ASSERT_ENABLE=0" ]
    }

    if (openthread_config_backbone_router_enable) {
      defines += [ "OPENTHREAD_CONFIG_BACKBONE_ROUTER_ENABLE=1" ]
    }

    if (openthread_config_border_agent_enable) {
      defines += [ "OPENTHREAD_CONFIG_BORDER_AGENT_ENABLE=1" ]
    }

    if (openthread_config_border_router_enable) {
      defines += [ "OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE=1" ]
    }

    if (openthread_config_border_routing_enable) {
      defines += [ "OPENTHREAD_CONFIG_BORDER_ROUTING_ENABLE=1" ]
    }

    if (openthread_external_mbedtls != "") {
      defines += [ "OPENTHREAD_CONFIG_ENABLE_BUILTIN_MBEDTLS=0" ]
    } else if (!openthread_config_enable_builtin_mbedtls_management) {
      defines += [ "OPENTHREAD_CONFIG_ENABLE_BUILTIN_MBEDTLS_MANAGEMENT=0" ]
    }

    if (openthread_config_channel_manager_enable) {
      defines += [ "OPENTHREAD_CONFIG_CHANNEL_MANAGER_ENABLE=1" ]
    }

    if (openthread_config_channel_monitor_enable) {
      defines += [ "OPENTHREAD_CONFIG_CHANNEL_MONITOR_ENABLE=1" ]
    }

    if (openthread_config_child_supervision_enable) {
      defines += [ "OPENTHREAD_CONFIG_CHILD_SUPERVISION_ENABLE=1" ]
    }

    if (openthread_config_coap_api_enable) {
      defines += [ "OPENTHREAD_CONFIG_COAP_API_ENABLE=1" ]
    }

    if (openthread_config_coap_secure_api_enable) {
      defines += [ "OPENTHREAD_CONFIG_COAP_SECURE_API_ENABLE=1" ]
    }

    if (openthread_config_coap_observe_api_enable) {
      defines += [ "OPENTHREAD_CONFIG_COAP_OBSERVE_API_ENABLE=1" ]
    }

    if (openthread_config_commissioner_enable) {
      defines += [ "OPENTHREAD_CONFIG_COMMISSIONER_ENABLE=1" ]
    }

    if (openthread_config_mac_csl_receiver_enable) {
      defines += [ "OPENTHREAD_CONFIG_MAC_CSL_RECEIVER_ENABLE=1" ]
    }

    if (openthread_config_dhcp6_client_enable) {
      defines += [ "OPENTHREAD_CONFIG_DHCP6_CLIENT_ENABLE=1" ]
    }

    if (openthread_config_dhcp6_server_enable) {
      defines += [ "OPENTHREAD_CONFIG_DHCP6_SERVER_ENABLE=1" ]
    }

    if (openthread_config_diag_enable) {
      defines += [ "OPENTHREAD_CONFIG_DIAG_ENABLE=1" ]
    }

    if (openthread_config_dns_client_enable) {
      defines += [ "OPENTHREAD_CONFIG_DNS_CLIENT_ENABLE=1" ]
    }

    if (openthread_config_dnssd_server_enable) {
      defines += [ "OPENTHREAD_CONFIG_DNSSD_SERVER_ENABLE=1" ]
    }

    if (openthread_config_ecdsa_enable) {
      defines += [ "OPENTHREAD_CONFIG_ECDSA_ENABLE=1" ]
    }

    if (openthread_config_dua_enable) {
      defines += [ "OPENTHREAD_CONFIG_DUA_ENABLE=1" ]
    }

    if (openthread_config_mlr_enable) {
      defines += [ "OPENTHREAD_CONFIG_MLR_ENABLE=1" ]
    }

    if (openthread_config_heap_external_enable) {
      defines += [ "OPENTHREAD_CONFIG_HEAP_EXTERNAL_ENABLE=1" ]
    }

    if (openthread_config_ip6_fragmentation_enable) {
      defines += [ "OPENTHREAD_CONFIG_IP6_FRAGMENTATION_ENABLE=1" ]
    }

    if (openthread_config_jam_detection_enable) {
      defines += [ "OPENTHREAD_CONFIG_JAM_DETECTION_ENABLE=1" ]
    }

    if (openthread_config_joiner_enable) {
      defines += [ "OPENTHREAD_CONFIG_JOINER_ENABLE=1" ]
    }

    if (openthread_config_legacy_enable) {
      defines += [ "OPENTHREAD_CONFIG_LEGACY_ENABLE=1" ]
    }

    if (openthread_config_link_metrics_enable) {
      defines += [ "OPENTHREAD_CONFIG_MLE_LINK_METRICS_ENABLE=1" ]
    }

    if (openthread_config_link_raw_enable) {
      defines += [ "OPENTHREAD_CONFIG_LINK_RAW_ENABLE=1" ]
    }

    if (openthread_config_log_level_dynamic_enable) {
      defines += [ "OPENTHREAD_CONFIG_LOG_LEVEL_DYNAMIC_ENABLE=1" ]
    }

    if (openthread_config_mac_filter_enable) {
      defines += [ "OPENTHREAD_CONFIG_MAC_FILTER_ENABLE=1" ]
    }

    if (openthread_config_message_use_heap) {
      defines += [ "OPENTHREAD_CONFIG_MESSAGE_USE_HEAP_ENABLE=1" ]
    }

    if (openthread_config_mle_long_routes_enable) {
      defines += [ "OPENTHREAD_CONFIG_MLE_LONG_ROUTES_ENABLE=1" ]
    }

    if (openthread_config_tmf_network_diag_mtd_enable) {
      defines += [ "OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE=1" ]
    }

    if (openthread_config_multiple_instance_enable) {
      defines += [ "OPENTHREAD_CONFIG_MULTIPLE_INSTANCE_ENABLE=1" ]
    }

    if (openthread_config_platform_netif_enable) {
      defines += [ "OPENTHREAD_CONFIG_PLATFORM_NETIF_ENABLE=1" ]
    }

    if (openthread_config_platform_udp_enable) {
      defines += [ "OPENTHREAD_CONFIG_PLATFORM_UDP_ENABLE=1" ]
    }

    if (openthread_config_reference_device_enable) {
      defines += [ "OPENTHREAD_CONFIG_REFERENCE_DEVICE_ENABLE=1" ]
    }

    if (openthread_config_tmf_netdata_service_enable) {
      defines += [ "OPENTHREAD_CONFIG_TMF_NETDATA_SERVICE_ENABLE=1" ]
    }

    if (openthread_settings_ram) {
      defines += [ "OPENTHREAD_SETTINGS_RAM=1" ]
    }

    if (openthread_config_ip6_slaac_enable) {
      defines += [ "OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE=1" ]
    }

    if (openthread_config_sntp_client_enable) {
      defines += [ "OPENTHREAD_CONFIG_SNTP_CLIENT_ENABLE=1" ]
    }

    if (openthread_config_srp_client_enable) {
      defines += [ "OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE=1" ]
    }

    if (openthread_config_srp_server_enable) {
      defines += [ "OPENTHREAD_CONFIG_SRP_SERVER_ENABLE=1" ]
    }

    if (openthread_config_ping_sender) {
      defines += [ "OPENTHREAD_CONFIG_PING_SENDER_ENABLE=1" ]
    }

    if (openthread_config_time_sync_enable) {
      defines += [ "OPENTHREAD_CONFIG_TIME_SYNC_ENABLE=1" ]
    }

    if (openthread_config_udp_forward_enable) {
      defines += [ "OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE=1" ]
    }

    if (openthread_config_full_logs) {
      defines += [ "OPENTHREAD_CONFIG_LOG_LEVEL=OT_LOG_LEVEL_DEBG" ]
      defines += [ "OPENTHREAD_CONFIG_LOG_PREPEND_LEVEL=1" ]
      defines += [ "OPENTHREAD_CONFIG_LOG_PREPEND_REGION=1" ]
    }

    if (openthread_config_otns_enable) {
      defines += [ "OPENTHREAD_CONFIG_OTNS_ENABLE=1" ]
    }
  }
